[
	/*
	Формат файла - hjson: https://hjson.github.io/ 

	Список провайдеров требует указания id и массива xmltv
	Для обработки используется первый элемент из xmltv, остальные только для url-hashes
	[i] Поддерживаются gzip файлы
	[i] Первый элемент может быть ссылкой, локальным файлом или "-"
	[i] "-" читает ввод из stdin, (!) технически нельзя использовать больше одного "-" за один запуск
	*/
	
	// Чтение из локального файла
	{	id:"it999f", xmltv: [ "it999.xml.gz" ] }

	// Чтение из файла по ссылке (добавится в url-hashes)
	{ id:"it999u", xmltv: [ "https://epg.it999.ru/epg.xml.gz" ] }

	// Конечно поддерживается классический json
	{	"id":"it999u2", "xmltv": [ "https://epg.it999.ru/epg.xml.gz" ] },

	// Чтение из файла, и запись в url-hashes ссылки	
	{ id:"lightiptv", xmltv: [ "lightiptv.xml.gz", "https://epg.lightiptv.cc/epg.xml.gz" ] }

	// Чтение из stdin, например:
	//   cat epg.xml.gz | ofoss-conv -c sample_config.json,intest
	//   curl -sL https://epg.it999.ru/epg.xml.gz | ofoss-conv -c sample_config.json,intest
	{ id:"intest", xmltv:[ "-" ] }

	// На этом источнике я тестирую производительность
	{ id:"bench", xmltv: ["http://prog4food.altervista.org/sfiles/sample_it999.test", "sample_it999.test"] }

	// Конечно можно указывать не gz файлы
	{"id":"propg", xmltv: [ "propg.xml" ] }
]