// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json_exporter

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter(in *jlexer.Lexer, out *EpgRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "descr":
			out.Descr = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "time":
			out.Time = uint64(in.Uint64())
		case "time_to":
			out.TimeTo = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter(out *jwriter.Writer, in EpgRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"descr\":"
		out.RawString(prefix)
		out.String(string(in.Descr))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Time))
	}
	{
		const prefix string = ",\"time_to\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TimeTo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EpgRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EpgRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EpgRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EpgRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter(l, v)
}
func easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter1(in *jlexer.Lexer, out *EpgData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "epg_data":
			if in.IsNull() {
				in.Skip()
				out.EpgData = nil
			} else {
				in.Delim('[')
				if out.EpgData == nil {
					if !in.IsDelim(']') {
						out.EpgData = make([]EpgRecord, 0, 1)
					} else {
						out.EpgData = []EpgRecord{}
					}
				} else {
					out.EpgData = (out.EpgData)[:0]
				}
				for !in.IsDelim(']') {
					var v1 EpgRecord
					(v1).UnmarshalEasyJSON(in)
					out.EpgData = append(out.EpgData, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter1(out *jwriter.Writer, in EpgData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"epg_data\":"
		out.RawString(prefix[1:])
		if in.EpgData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.EpgData {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EpgData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EpgData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EpgData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EpgData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter1(l, v)
}
func easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter2(in *jlexer.Lexer, out *ChListData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ChListData, 0, 8)
			} else {
				*out = ChListData{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *string
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(string)
				}
				*v4 = string(in.String())
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter2(out *jwriter.Writer, in ChListData) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				out.String(string(*v6))
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ChListData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChListData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeOttPlayEpgConverterInternalJsonExporter2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChListData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChListData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeOttPlayEpgConverterInternalJsonExporter2(l, v)
}
